buildscript {
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		jcenter()
		google()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.2.0', {
			exclude module: 'xmlpull'
		}
		classpath 'com.github.alxndrsn:android-check:1f87548c0686d823e5f1490a2053b70bd9f5022e', {
			exclude module: 'xmlpull'
		}
		classpath 'de.mobilej.unmock:UnMockPlugin:0.7.0'
	}
}
apply plugin: 'com.android.application'
apply plugin: 'com.noveogroup.android.check'
apply plugin: 'de.mobilej.unmock'

// enable verbose lint warnings
gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs <<
				'-Xlint:deprecation' <<
				'-Xlint:unchecked' <<
				'-Xdiags:verbose'
	}
}

repositories {
	maven { url "${System.env.ANDROID_HOME}/extras/android/m2repository/" }
	mavenCentral()
	jcenter()
	maven { url 'https://s3.amazonaws.com/repo.commonsware.com' }
	google()
}

def excludeKxml2 = {
	// This transitive dependency is excluded from some direct dependencies to prevent
	// "Program type already present: org.xmlpull.v1.XmlSerializer" when running
	// `gradle clean transformDexArchiveWithExternalLibsDexMergerForGenericDebugAndroidTest`
	// This class is also included in the android core libs by default, so this should
	// be safe to exclude from androidTestImplementation and implementation configurations.
	exclude module: 'kxml2'
}

dependencies {
	testImplementation 'com.google.android:android-test:4.1.1.4'
	testImplementation 'org.robolectric:robolectric:3.8'
	testImplementation 'com.squareup.okhttp3:mockwebserver:3.2.0'
	testImplementation 'org.mockito:mockito-core:1.10.19'

	androidTestImplementation 'com.google.android:android-test:4.1.1.4'
	androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.2.0'
	androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2', excludeKxml2
	androidTestImplementation 'com.android.support.test:rules:1.0.2', excludeKxml2

	implementation 'com.android.support:support-core-ui:28.0.0'
	implementation 'com.android.support:support-fragment:28.0.0'
	implementation 'com.commonsware.cwac:wakeful:1.1.0'
	implementation 'com.google.code.findbugs:annotations:3.0.1', {
		// Need to exclude these, or build is broken by:
		//   com.android.dex.DexException: Multiple dex files define Ljavax/annotation/CheckForNull
		exclude module: 'jsr305'
		exclude module: 'jcip-annotations'
	}
}

def getVersionCode = {
  int versionCode = 1
  if(System.env.CI == 'true' && System.env.GIT_TAG && System.env.GIT_TAG.startsWith('v')) {
    def versionParts = System.env.GIT_TAG.split(/[\.v]/)

    if (versionParts.length != 4)
      throw new RuntimeException("Unexpected version number - should be of formatted as 'v0.0.0', but was: $System.env.GIT_TAG")

    versionParts = versionParts.drop(1).collect { Integer.parseInt(it) }

    if (versionParts[1] > 999 || versionParts[2] > 999)
      throw new RuntimeException('Version part greater than 999 not allowed.')

    versionCode = (1000 * 1000 * versionParts[0]) + 1000 * versionParts[1] + versionParts[2]
    if (versionCode > 2100000000 / 10)
      throw new RuntimeException('versionCode bigger than max allowed by Google Play.')
  }

  return versionCode
}

def getVersionName = {
  System.env.GIT_TAG ?: 'SNAPSHOT'
}

android {
	compileSdkVersion 30
	buildToolsVersion '30.0.0'

	packagingOptions {
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
	}

	defaultConfig {
		minSdkVersion 16
		targetSdkVersion 30

		versionCode getVersionCode()
		versionName getVersionName()
		archivesBaseName = "${project.name}-${versionName}"

		testInstrumentationRunner 'medic.gateway.alert.test.WakingJUnitRunner'
	}

	applicationVariants.all {
		buildConfigField "String", "LOG_TAG", '"CHTGateway"'
		buildConfigField "boolean", "DISABLE_APP_URL_VALIDATION", "Boolean.parseBoolean(\"${System.env.DISABLE_APP_URL_VALIDATION}\")";

		buildConfigField "boolean", "CI", "Boolean.parseBoolean(\"${System.env.CI}\")";
		buildConfigField "boolean", "FORCE_SEED", "Boolean.parseBoolean(\"${System.env.FORCE_SEED}\")";
		buildConfigField "boolean", "LOAD_SEED_DATA", "Boolean.parseBoolean(\"${System.env.LOAD_SEED_DATA}\")";

		buildConfigField "boolean", "IS_DUMMY_SEND_AVAILABLE", "Boolean.parseBoolean(\"${System.env.ENABLE_DUMMY_SEND_OPTION}\")";
	}

	sourceSets {
		test { java.srcDirs = [ 'src/test/java', 'src/libTest/java' ] }
		androidTest { java.srcDirs = [ 'src/androidTest/java', 'src/libTest/java' ] }
	}

	signingConfigs {
		release {
			storeFile file(System.env.ANDROID_KEYSTORE_PATH ?: signingConfigs.debug.storeFile)
			storePassword System.env.ANDROID_KEYSTORE_PASSWORD ?: signingConfigs.debug.storePassword
			keyAlias System.env.ANDROID_KEY_ALIAS ?: signingConfigs.debug.keyAlias
			keyPassword System.env.ANDROID_KEY_PASSWORD ?: signingConfigs.debug.keyPassword
		}
	}

	buildTypes {
		debug {
			testCoverageEnabled = true
		}
		release {
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'config/proguard.pro'
			signingConfig signingConfigs.release
		}
	}

	check {
		abortOnError true
	}

	lintOptions {
		lintConfig = new File('config/lint.xml')

		disable 'UnusedResources' // linter can't handle static imports, so just skip this test
		disable 'GradleDependency' // TODO update to latest support-v4 lib and re-enable this rule

		warningsAsErrors true
		// abortOnError false

		xmlReport false

		if(System.env.CI == 'true') {
			abortOnError true
			htmlReport false
			textReport true
			textOutput 'stdout'
		}
	}

	testOptions {
		unitTests.includeAndroidResources true
		unitTests.all {
			testLogging {
				events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
				outputs.upToDateWhen { false }
				showStandardStreams = true
			}
		}
	}

	flavorDimensions 'brand'
	productFlavors {
		generic {
			applicationId = 'medic.gateway.alert.generic'
			buildConfigField "boolean", "IS_GENERIC_FLAVOUR", "true"
			buildConfigField "boolean", "IS_MEDIC_FLAVOUR", "false"
		}
		medic {
			applicationId = 'medic.gateway.alert'
			buildConfigField "boolean", "IS_GENERIC_FLAVOUR", "false"
			buildConfigField "boolean", "IS_MEDIC_FLAVOUR", "true"
		}
	}
}

unMock {
	keep 'android.net.Uri'
}
